// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: proto/supplier.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SupplierServiceProto_P_GetSuppliers_FullMethodName   = "/proto.SupplierServiceProto/P_GetSuppliers"
	SupplierServiceProto_P_AddSupplier_FullMethodName    = "/proto.SupplierServiceProto/P_AddSupplier"
	SupplierServiceProto_P_UpdateSupplier_FullMethodName = "/proto.SupplierServiceProto/P_UpdateSupplier"
	SupplierServiceProto_P_DeleteSupplier_FullMethodName = "/proto.SupplierServiceProto/P_DeleteSupplier"
)

// SupplierServiceProtoClient is the client API for SupplierServiceProto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SupplierServiceProtoClient interface {
	P_GetSuppliers(ctx context.Context, in *SupplierRequest, opts ...grpc.CallOption) (*SupplierList, error)
	P_AddSupplier(ctx context.Context, in *AddSupplierRequest, opts ...grpc.CallOption) (*Supplier, error)
	P_UpdateSupplier(ctx context.Context, in *UpdateSupplierRequest, opts ...grpc.CallOption) (*Supplier, error)
	P_DeleteSupplier(ctx context.Context, in *DeleteSupplierRequest, opts ...grpc.CallOption) (*DeleteSupplierResponse, error)
}

type supplierServiceProtoClient struct {
	cc grpc.ClientConnInterface
}

func NewSupplierServiceProtoClient(cc grpc.ClientConnInterface) SupplierServiceProtoClient {
	return &supplierServiceProtoClient{cc}
}

func (c *supplierServiceProtoClient) P_GetSuppliers(ctx context.Context, in *SupplierRequest, opts ...grpc.CallOption) (*SupplierList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SupplierList)
	err := c.cc.Invoke(ctx, SupplierServiceProto_P_GetSuppliers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplierServiceProtoClient) P_AddSupplier(ctx context.Context, in *AddSupplierRequest, opts ...grpc.CallOption) (*Supplier, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Supplier)
	err := c.cc.Invoke(ctx, SupplierServiceProto_P_AddSupplier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplierServiceProtoClient) P_UpdateSupplier(ctx context.Context, in *UpdateSupplierRequest, opts ...grpc.CallOption) (*Supplier, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Supplier)
	err := c.cc.Invoke(ctx, SupplierServiceProto_P_UpdateSupplier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplierServiceProtoClient) P_DeleteSupplier(ctx context.Context, in *DeleteSupplierRequest, opts ...grpc.CallOption) (*DeleteSupplierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSupplierResponse)
	err := c.cc.Invoke(ctx, SupplierServiceProto_P_DeleteSupplier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SupplierServiceProtoServer is the server API for SupplierServiceProto service.
// All implementations must embed UnimplementedSupplierServiceProtoServer
// for forward compatibility.
type SupplierServiceProtoServer interface {
	P_GetSuppliers(context.Context, *SupplierRequest) (*SupplierList, error)
	P_AddSupplier(context.Context, *AddSupplierRequest) (*Supplier, error)
	P_UpdateSupplier(context.Context, *UpdateSupplierRequest) (*Supplier, error)
	P_DeleteSupplier(context.Context, *DeleteSupplierRequest) (*DeleteSupplierResponse, error)
	mustEmbedUnimplementedSupplierServiceProtoServer()
}

// UnimplementedSupplierServiceProtoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSupplierServiceProtoServer struct{}

func (UnimplementedSupplierServiceProtoServer) P_GetSuppliers(context.Context, *SupplierRequest) (*SupplierList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method P_GetSuppliers not implemented")
}
func (UnimplementedSupplierServiceProtoServer) P_AddSupplier(context.Context, *AddSupplierRequest) (*Supplier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method P_AddSupplier not implemented")
}
func (UnimplementedSupplierServiceProtoServer) P_UpdateSupplier(context.Context, *UpdateSupplierRequest) (*Supplier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method P_UpdateSupplier not implemented")
}
func (UnimplementedSupplierServiceProtoServer) P_DeleteSupplier(context.Context, *DeleteSupplierRequest) (*DeleteSupplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method P_DeleteSupplier not implemented")
}
func (UnimplementedSupplierServiceProtoServer) mustEmbedUnimplementedSupplierServiceProtoServer() {}
func (UnimplementedSupplierServiceProtoServer) testEmbeddedByValue()                              {}

// UnsafeSupplierServiceProtoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SupplierServiceProtoServer will
// result in compilation errors.
type UnsafeSupplierServiceProtoServer interface {
	mustEmbedUnimplementedSupplierServiceProtoServer()
}

func RegisterSupplierServiceProtoServer(s grpc.ServiceRegistrar, srv SupplierServiceProtoServer) {
	// If the following call pancis, it indicates UnimplementedSupplierServiceProtoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SupplierServiceProto_ServiceDesc, srv)
}

func _SupplierServiceProto_P_GetSuppliers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplierServiceProtoServer).P_GetSuppliers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplierServiceProto_P_GetSuppliers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplierServiceProtoServer).P_GetSuppliers(ctx, req.(*SupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplierServiceProto_P_AddSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplierServiceProtoServer).P_AddSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplierServiceProto_P_AddSupplier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplierServiceProtoServer).P_AddSupplier(ctx, req.(*AddSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplierServiceProto_P_UpdateSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplierServiceProtoServer).P_UpdateSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplierServiceProto_P_UpdateSupplier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplierServiceProtoServer).P_UpdateSupplier(ctx, req.(*UpdateSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplierServiceProto_P_DeleteSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplierServiceProtoServer).P_DeleteSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplierServiceProto_P_DeleteSupplier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplierServiceProtoServer).P_DeleteSupplier(ctx, req.(*DeleteSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SupplierServiceProto_ServiceDesc is the grpc.ServiceDesc for SupplierServiceProto service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SupplierServiceProto_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SupplierServiceProto",
	HandlerType: (*SupplierServiceProtoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "P_GetSuppliers",
			Handler:    _SupplierServiceProto_P_GetSuppliers_Handler,
		},
		{
			MethodName: "P_AddSupplier",
			Handler:    _SupplierServiceProto_P_AddSupplier_Handler,
		},
		{
			MethodName: "P_UpdateSupplier",
			Handler:    _SupplierServiceProto_P_UpdateSupplier_Handler,
		},
		{
			MethodName: "P_DeleteSupplier",
			Handler:    _SupplierServiceProto_P_DeleteSupplier_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/supplier.proto",
}
